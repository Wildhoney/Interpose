{"version":3,"sources":["src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { execFileSync } from 'child_process'\nimport { readFileSync, statSync } from 'fs'\nimport { dirname, join } from 'path'\n\nimport md5hex from 'md5-hex'\n\nfunction tryReadFileSync (file) {\n  try {\n    return readFileSync(file)\n  } catch (err) {\n    return null\n  }\n}\n\nconst TEN_MEBIBYTE = 1024 * 1024 * 10\n\nconst git = {\n  tryGetRef (dir, head) {\n    const m = /^ref: (.+)$/.exec(head.toString('utf8').trim())\n    if (!m) return null\n\n    return tryReadFileSync(join(dir, '.git', m[1]))\n  },\n\n  tryGetDiff (dir) {\n    if (!execFileSync) return null\n\n    try {\n      // Attempt to get consistent output no matter the platform. Diff both\n      // staged and unstaged changes.\n      return execFileSync('git', ['--no-pager', 'diff', 'HEAD', '--no-color', '--no-ext-diff'], {\n        cwd: dir,\n        maxBuffer: TEN_MEBIBYTE,\n        env: Object.assign({}, process.env, {\n          // Force the GIT_DIR to prevent git from diffing a parent repository\n          // in case the directory isn't actually a repository.\n          GIT_DIR: join(dir, '.git')\n        }),\n        // Ignore stderr.\n        stdio: ['ignore', 'pipe', 'ignore']\n      })\n    } catch (err) {\n      return null\n    }\n  }\n}\n\nfunction addPackageData (inputs, path) {\n  const dir = statSync(path).isDirectory() ? path : dirname(path)\n  inputs.push(dir)\n\n  const pkg = readFileSync(join(dir, 'package.json'))\n  inputs.push(pkg)\n\n  const head = tryReadFileSync(join(dir, '.git', 'HEAD'))\n  if (head) {\n    inputs.push(head)\n\n    const packed = tryReadFileSync(join(dir, '.git', 'packed-refs'))\n    if (packed) inputs.push(packed)\n\n    const ref = git.tryGetRef(dir, head)\n    if (ref) inputs.push(ref)\n\n    const diff = git.tryGetDiff(dir)\n    if (diff) inputs.push(diff)\n  }\n}\n\nfunction computeHash (paths, pepper, salt) {\n  const inputs = []\n  if (pepper) inputs.push(pepper)\n\n  if (typeof salt !== 'undefined') {\n    if (Buffer.isBuffer(salt) || typeof salt === 'string') {\n      inputs.push(salt)\n    } else if (typeof salt === 'object' && salt !== null) {\n      inputs.push(JSON.stringify(salt))\n    } else {\n      throw new TypeError('Salt must be an Array, Buffer, Object or string')\n    }\n  }\n\n  for (let i = 0; i < paths.length; i++) {\n    addPackageData(inputs, paths[i])\n  }\n\n  return md5hex(inputs)\n}\n\nlet ownHash = null\nexport function sync (paths, salt) {\n  if (!ownHash) {\n    // Memoize the hash for package-hash itself.\n    ownHash = new Buffer(computeHash([__dirname]), 'hex')\n  }\n\n  if (paths === __dirname && typeof salt === 'undefined') {\n    // Special case that allow the pepper value to be obtained. Mainly here for\n    // testing purposes.\n    return ownHash.toString('hex')\n  }\n\n  if (Array.isArray(paths)) {\n    return computeHash(paths, ownHash, salt)\n  } else {\n    return computeHash([paths], ownHash, salt)\n  }\n}\n"]}